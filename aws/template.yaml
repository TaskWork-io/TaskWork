AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TaskGrid Serverless Application

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        STRIPE_SECRET_KEY: !Ref StripeSecretKey
        STRIPE_WEBHOOK_SECRET: !Ref StripeWebhookSecret
        FRONTEND_URL: !Ref FrontendUrl
        USERS_TABLE: !Ref UsersTable
        PROJECTS_TABLE: !Ref ProjectsTable
        TASKS_TABLE: !Ref TasksTable
        SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
        NOTIFICATIONS_TABLE: !Ref NotificationsTable

Parameters:
  StripeSecretKey:
    Type: String
    Description: Stripe Secret Key
    NoEcho: true
  
  StripeWebhookSecret:
    Type: String
    Description: Stripe Webhook Secret
    NoEcho: true
    
  FrontendUrl:
    Type: String
    Description: Frontend URL for CORS and redirects
    Default: https://yourdomain.com

Resources:
  # API Gateway
  TaskGridApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Sub "'${FrontendUrl}'"
      Auth:
        DefaultAuthorizer: TaskGridAuthorizer
        Authorizers:
          TaskGridAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn

  # Lambda Functions
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: auth-handler.handler
      Description: Custom authorizer for API Gateway
      Environment:
        Variables:
          CLERK_SECRET_KEY: !Ref ClerkSecretKey

  SubscriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: subscription-handler.handler
      Description: Handle subscription and billing operations
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - SESBulkTemplatedEmailPolicy:
            IdentityName: "*"
      Events:
        GetBilling:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/billing
            Method: get
        CreateCheckout:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/stripe/create-checkout
            Method: post
        BillingPortal:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/stripe/billing-portal
            Method: post
        CheckLimit:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/subscription/check-limit
            Method: post
        StripeWebhooks:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/stripe/webhooks
            Method: post
            Auth:
              Authorizer: NONE  # Webhooks don't need auth

  ProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: projects-handler.handler
      Description: Handle project CRUD operations
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
      Events:
        GetProjects:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/projects
            Method: get
        CreateProject:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/projects
            Method: post
        GetProject:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/projects/{id}
            Method: get
        UpdateProject:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/projects/{id}
            Method: put
        DeleteProject:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/projects/{id}
            Method: delete

  TasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: tasks-handler.handler
      Description: Handle task CRUD operations
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TasksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
      Events:
        GetTasks:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/tasks
            Method: get
        CreateTask:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/tasks
            Method: post
        GetTask:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/tasks/{id}
            Method: get
        UpdateTask:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/tasks/{id}
            Method: put
        DeleteTask:
          Type: Api
          Properties:
            RestApiId: !Ref TaskGridApi
            Path: /api/tasks/{id}
            Method: delete

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: projectId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: projectId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
        - AttributeName: projectId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProjectIdIndex
          KeySchema:
            - AttributeName: projectId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: stripeSubscriptionId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StripeSubscriptionIndex
          KeySchema:
            - AttributeName: stripeSubscriptionId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: notificationId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: notificationId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # S3 Bucket for file storage
  FileStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-files"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: [!Ref FrontendUrl]
            ExposedHeaders: [ETag]

  # CloudFront distribution for file delivery
  FilesCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          ForwardedValues:
            QueryString: false
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FileStorageBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${AWS::StackName}"

  # S3 Bucket Policy
  FileStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FileStorageBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
            Action: s3:GetObject
            Resource: !Sub "${FileStorageBucket}/*"

  # Lambda function for monthly usage reset
  UsageResetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: usage-reset-handler.handler
      Description: Reset monthly usage counters
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 1 * ? *)  # First day of every month at midnight
            Description: Reset monthly usage counters

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${TaskGridApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  FileStorageUrl:
    Description: CloudFront distribution URL for file storage
    Value: !GetAtt FilesCDN.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-FilesUrl"

  UsersTableName:
    Description: DynamoDB Users table name
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${AWS::StackName}-UsersTable"

  ProjectsTableName:
    Description: DynamoDB Projects table name
    Value: !Ref ProjectsTable
    Export:
      Name: !Sub "${AWS::StackName}-ProjectsTable"

  TasksTableName:
    Description: DynamoDB Tasks table name
    Value: !Ref TasksTable
    Export:
      Name: !Sub "${AWS::StackName}-TasksTable"

  SubscriptionsTableName:
    Description: DynamoDB Subscriptions table name
    Value: !Ref SubscriptionsTable
    Export:
      Name: !Sub "${AWS::StackName}-SubscriptionsTable"
